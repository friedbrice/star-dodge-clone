// Generated by psc-bundle 0.7.3.0
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var not = function (dict) {
      return dict.not;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };                                                
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };                
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (__dict_Eq_7) {
      return eq(__dict_Eq_7);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (_30) {
          return a;
      };
  };
  var $$void = function (__dict_Functor_12) {
      return function (fa) {
          return $less$dollar$greater(__dict_Functor_12)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };                                                   
  var $less$less$less = function (__dict_Semigroupoid_14) {
      return compose(__dict_Semigroupoid_14);
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_11) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_10) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_11(_10));
                  });
              });
          };
      };
  };
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Eq"] = Eq;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["eqBoolean"] = eqBoolean;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $times$greater = function (__dict_Apply_1) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  exports["*>"] = $times$greater;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
 
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["random"] = $foreign.random;;
 
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };       
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (__dict_BooleanAlgebra_1) {
      return new Prelude.Semigroup(function (_125) {
          return function (_126) {
              return Prelude.disj(__dict_BooleanAlgebra_1)(_125)(_126);
          };
      });
  };
  var runDisj = function (_115) {
      return _115;
  };
  var monoidDisj = function (__dict_BooleanAlgebra_3) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(__dict_BooleanAlgebra_3);
      }, Prelude.bottom(__dict_BooleanAlgebra_3["__superclass_Prelude.Bounded_0"]()));
  };
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (__dict_Applicative_0) {
      return function (__dict_Foldable_1) {
          return function (f) {
              return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
          };
      };
  };
  var for_ = function (__dict_Applicative_2) {
      return function (__dict_Foldable_3) {
          return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableArray = new Foldable(function (__dict_Monoid_19) {
      return function (f) {
          return function (xs) {
              return foldr(foldableArray)(function (x) {
                  return function (acc) {
                      return Prelude["<>"](__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(__dict_Monoid_19))(xs);
          };
      };
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (__dict_Foldable_26) {
      return function (__dict_BooleanAlgebra_27) {
          return function (p) {
              return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Disj.runDisj)(foldMap(__dict_Foldable_26)(Data_Monoid_Disj.monoidDisj(__dict_BooleanAlgebra_27))(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Disj.Disj)(p)));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["any"] = any;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequence = function (dict) {
      return dict.sequence;
  }; 
  var $$for = function (__dict_Applicative_22) {
      return function (__dict_Traversable_23) {
          return function (x) {
              return function (f) {
                  return traverse(__dict_Traversable_23)(__dict_Applicative_22)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Alt = PS["Control.Alt"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var toList = function (__dict_Foldable_3) {
      return Data_Foldable.foldr(__dict_Foldable_3)(Cons.create)(Nil.value);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy__362) {
              var acc = __copy_acc;
              var _362 = __copy__362;
              tco: while (true) {
                  var acc_1 = acc;
                  if (_362 instanceof Nil) {
                      return acc_1;
                  };
                  if (_362 instanceof Cons) {
                      var __tco_acc = new Cons(_362.value0, acc);
                      var __tco__362 = _362.value1;
                      acc = __tco_acc;
                      _362 = __tco__362;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 363, column 1 - line 364, column 1: " + [ acc.constructor.name, _362.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy__372) {
              return function (__copy__373) {
                  var acc = __copy_acc;
                  var _372 = __copy__372;
                  var _373 = __copy__373;
                  tco: while (true) {
                      var acc_1 = acc;
                      if (_372 === 0) {
                          return reverse(acc_1);
                      };
                      var acc_1 = acc;
                      if (_373 instanceof Nil) {
                          return reverse(acc_1);
                      };
                      if (_373 instanceof Cons) {
                          var __tco_acc = new Cons(_373.value0, acc);
                          var __tco__372 = _372 - 1;
                          var __tco__373 = _373.value1;
                          acc = __tco_acc;
                          _372 = __tco__372;
                          _373 = __tco__373;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 485, column 1 - line 486, column 1: " + [ acc.constructor.name, _372.constructor.name, _373.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var _1224 = start > end;
                  if (_1224) {
                      return 1;
                  };
                  if (!_1224) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ _1224.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var functorList = new Prelude.Functor(function (f) {
      return function (_382) {
          if (_382 instanceof Nil) {
              return Nil.value;
          };
          if (_382 instanceof Cons) {
              return new Cons(f(_382.value0), Prelude["<$>"](functorList)(f)(_382.value1));
          };
          throw new Error("Failed pattern match: " + [ f.constructor.name, _382.constructor.name ]);
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
      return function (f) {
          return function (_385) {
              if (_385 instanceof Nil) {
                  return Data_Monoid.mempty(__dict_Monoid_16);
              };
              if (_385 instanceof Cons) {
                  return Prelude["<>"](__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(f(_385.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_16)(f)(_385.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, _385.constructor.name ]);
          };
      };
  }, function (o) {
      return function (b) {
          return function (_384) {
              if (_384 instanceof Nil) {
                  return b;
              };
              if (_384 instanceof Cons) {
                  return Data_Foldable.foldl(foldableList)(o)(o(b)(_384.value0))(_384.value1);
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _384.constructor.name ]);
          };
      };
  }, function (o) {
      return function (b) {
          return function (_383) {
              if (_383 instanceof Nil) {
                  return b;
              };
              if (_383 instanceof Cons) {
                  return o(_383.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_383.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _383.constructor.name ]);
          };
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (__dict_Applicative_2) {
      return function (_388) {
          if (_388 instanceof Nil) {
              return Prelude.pure(__dict_Applicative_2)(Nil.value);
          };
          if (_388 instanceof Cons) {
              return Prelude["<*>"](__dict_Applicative_2["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_388.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_2)(_388.value1));
          };
          throw new Error("Failed pattern match: " + [ _388.constructor.name ]);
      };
  }, function (__dict_Applicative_1) {
      return function (f) {
          return function (_387) {
              if (_387 instanceof Nil) {
                  return Prelude.pure(__dict_Applicative_1)(Nil.value);
              };
              if (_387 instanceof Cons) {
                  return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_387.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_1)(f)(_387.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, _387.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["take"] = take;
  exports["reverse"] = reverse;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["toList"] = toList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setLineWidth = function(width) {
      return function(ctx) {
          return function() {
              ctx.lineWidth = width;
              return ctx;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var _23 = path();
              $foreign.stroke(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_23)();
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              $foreign.beginPath(ctx)();
              var _24 = path();
              $foreign.fill(ctx)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(_24)();
          };
      };
  };
  exports["fillPath"] = fillPath;
  exports["strokePath"] = strokePath;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["scale"] = $foreign.scale;
  exports["fillRect"] = $foreign.fillRect;
  exports["arc"] = $foreign.arc;
  exports["closePath"] = $foreign.closePath;
  exports["moveTo"] = $foreign.moveTo;
  exports["lineTo"] = $foreign.lineTo;
  exports["stroke"] = $foreign.stroke;
  exports["beginPath"] = $foreign.beginPath;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.sampleOnP =
    function sampleOnP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig2.get());
          sig1.subscribe(function() {
            out.set(sig2.get());
          });
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Signal"];
  var Data_Foldable = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"]; 
  var sampleOn = $foreign.sampleOnP($foreign.constant);
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  exports["sampleOn"] = sampleOn;
  exports["foldp"] = foldp;
  exports["functorSignal"] = functorSignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Signal = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Signal = PS["Signal"];
  var Prelude = PS["Prelude"];
  var Signal_Time = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];                                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  /* global exports */
  "use strict";                

  exports.pi = Math.PI;      
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var $foreign = PS["Math"];
  exports["pi"] = $foreign.pi;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.3.0
  "use strict";
  var Data_List = PS["Data.List"];
  var Prelude = PS["Prelude"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Signal_DOM = PS["Signal.DOM"];
  var Signal = PS["Signal"];
  var Data_Foldable = PS["Data.Foldable"];
  var $$Math = PS["Math"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Signal_Time = PS["Signal.Time"];     
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var Playing = (function () {
      function Playing(value0) {
          this.value0 = value0;
      };
      Playing.create = function (value0) {
          return new Playing(value0);
      };
      return Playing;
  })();
  var GameOver = (function () {
      function GameOver(value0) {
          this.value0 = value0;
      };
      GameOver.create = function (value0) {
          return new GameOver(value0);
      };
      return GameOver;
  })();
  var subtract = function (p1) {
      return function (p2) {
          return {
              x: p1.x - p2.x, 
              y: p1.y - p2.y
          };
      };
  };
  var newGame = (function () {
      var p = {
          x: 0.0, 
          y: 0.5
      };
      return new Playing({
          paths: Data_List.singleton(Data_List.toList(Data_Foldable.foldableArray)([ p, p ])), 
          direction: Down.value
      });
  })();
  var len2 = function (p) {
      return p.x * p.x + p.y * p.y;
  };
  var eqDirection = new Prelude.Eq(function (_10) {
      return function (_11) {
          if (_10 instanceof Up && _11 instanceof Up) {
              return true;
          };
          if (_10 instanceof Down && _11 instanceof Down) {
              return true;
          };
          return false;
      };
  });
  var dist2 = function (p1) {
      return function (p2) {
          return len2(subtract(p2)(p1));
      };
  };
  var main = function __do() {
      var _8 = Graphics_Canvas.getCanvasElementById("canvas")();
      if (_8 instanceof Data_Maybe.Just) {
          var _7 = Graphics_Canvas.getContext2D(_8.value0)();
          var _6 = Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(Data_List[".."](1)(100))(function (_9) {
              return Prelude["<*>"](Control_Monad_Eff.applyEff)(Prelude["<$>"](Control_Monad_Eff.functorEff)(function (_0) {
                  return function (_1) {
                      return {
                          x: _0, 
                          y: _1
                      };
                  };
              })(Control_Monad_Eff_Random.random))(Control_Monad_Eff_Random.random);
          })();
          var _5 = Signal_DOM.animationFrame();
          var _4 = Signal_DOM.keyPressed(32)();
          Graphics_Canvas.scale({
              scaleX: 800.0, 
              scaleY: 800.0
          })(_7)();
          Graphics_Canvas.setLineWidth(1.0e-3)(_7)();
          var renderPaths = function (paths) {
              return function __do() {
                  Graphics_Canvas.setStrokeStyle("lightblue")(_7)();
                  return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(paths)(function (path) {
                      if (path instanceof Data_List.Cons) {
                          return function __do() {
                              Graphics_Canvas.beginPath(_7)();
                              Graphics_Canvas.moveTo(_7)(path.value0.x)(path.value0.y)();
                              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(path.value1)(function (p) {
                                  return Graphics_Canvas.lineTo(_7)(p.x)(p.y);
                              })();
                              return Graphics_Canvas.stroke(_7)();
                          };
                      };
                      throw new Error("Failed pattern match at Main line 177, column 7 - line 178, column 7: " + [ path.constructor.name ]);
                  })();
              };
          };
          var playing = function (paths) {
              return function (inputs) {
                  return new Playing({
                      paths: paths, 
                      direction: (function () {
                          if (inputs.space) {
                              return Up.value;
                          };
                          if (!inputs.space) {
                              return Down.value;
                          };
                          throw new Error("Failed pattern match at Main line 70, column 1 - line 187, column 30: " + [ inputs.space.constructor.name ]);
                      })()
                  });
              };
          };
          var move = function (pt) {
              return function (space_1) {
                  if (pt.x < 0.998) {
                      var dy = (function () {
                          if (space_1) {
                              return 1.0;
                          };
                          if (!space_1) {
                              return -1.0;
                          };
                          throw new Error("Failed pattern match at Main line 129, column 17 - line 130, column 13: " + [ space_1.constructor.name ]);
                      })();
                      return new Data_Either.Right({
                          x: pt.x + 2.0e-3, 
                          y: pt.y + dy * 2.0e-3
                      });
                  };
                  if (Prelude.otherwise) {
                      return new Data_Either.Left(new Data_Tuple.Tuple({
                          x: 1.0, 
                          y: pt.y
                      }, {
                          x: 0.0, 
                          y: pt.y
                      }));
                  };
                  throw new Error("Failed pattern match at Main line 70, column 1 - line 187, column 30: " + [ pt.constructor.name, space_1.constructor.name ]);
              };
          };
          var linesIntersect = function (p1) {
              return function (p2) {
                  return function (q1) {
                      return function (q2) {
                          var lq2 = (q1.x - q2.x) * (q1.x - q2.x) + (q1.y - q2.y) * (q1.y - q2.y);
                          var lp2 = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
                          var d2 = (p1.x - q1.x) * (q2.x - q1.x) + (p1.y - q1.y) * (q2.y - q1.y);
                          var d1 = (q1.x - p1.x) * (p2.x - p1.x) + (q1.y - p1.y) * (p2.y - p1.y);
                          return d1 > 0.0 && (d1 < lp2 && (d2 > 0.0 && d2 < lq2));
                      };
                  };
              };
          };
          var testLineSegments = function (q1) {
              return function (q2) {
                  var go = function (__copy__15) {
                      var _15 = __copy__15;
                      tco: while (true) {
                          if (_15 instanceof Data_List.Cons && _15.value1 instanceof Data_List.Cons) {
                              if (linesIntersect(_15.value0)(_15.value1.value0)(q1)(q2)) {
                                  return true;
                              };
                              if (Prelude.otherwise) {
                                  var __tco__15 = _15.value1;
                                  _15 = __tco__15;
                                  continue tco;
                              };
                          };
                          return false;
                      };
                  };
                  return go;
              };
          };
          var testCollision = function (_12) {
              if (_12 instanceof Data_List.Cons && (_12.value0 instanceof Data_List.Cons && _12.value0.value1 instanceof Data_List.Cons)) {
                  if (_12.value0.value0.y <= 0.1) {
                      return true;
                  };
                  if (_12.value0.value0.y >= 0.9) {
                      return true;
                  };
                  if (Data_Foldable.any(Data_List.foldableList)(Prelude.booleanAlgebraBoolean)(Prelude["<<<"](Prelude.semigroupoidFn)(function (_3) {
                      return _3 < 2.25e-4;
                  })(dist2(_12.value0.value0)))(_6)) {
                      return true;
                  };
                  if (Data_Foldable.any(Data_List.foldableList)(Prelude.booleanAlgebraBoolean)(testLineSegments(_12.value0.value0)(_12.value0.value1.value0))(_12.value1)) {
                      return true;
                  };
                  if (Prelude.otherwise) {
                      return false;
                  };
              };
              throw new Error("Failed pattern match at Main line 70, column 1 - line 187, column 30: " + [ _12.constructor.name ]);
          };
          var inputs = Prelude["<$>"](Signal.functorSignal)(function (_2) {
              return {
                  space: _2
              };
          })(_4);
          var state = (function () {
              var update = function (inputs_1) {
                  return function (_14) {
                      if (_14 instanceof Playing && (_14.value0.paths instanceof Data_List.Cons && _14.value0.paths.value0 instanceof Data_List.Cons)) {
                          if (testCollision(_14.value0.paths)) {
                              return new GameOver(_14.value0.paths);
                          };
                          if (Prelude["=="](Prelude.eqBoolean)(Prelude["=="](eqDirection)(_14.value0.direction)(Up.value))(inputs_1.space)) {
                              var _45 = move(_14.value0.paths.value0.value0)(inputs_1.space);
                              if (_45 instanceof Data_Either.Right) {
                                  return playing(new Data_List.Cons(new Data_List.Cons(_45.value0, _14.value0.paths.value0.value1), _14.value0.paths.value1))(inputs_1);
                              };
                              if (_45 instanceof Data_Either.Left) {
                                  return playing(Data_List.take(3)(new Data_List.Cons(Data_List.toList(Data_Foldable.foldableArray)([ _45.value0.value1, _45.value0.value1 ]), new Data_List.Cons(new Data_List.Cons(_45.value0.value0, _14.value0.paths.value0.value1), _14.value0.paths.value1))))(inputs_1);
                              };
                              throw new Error("Failed pattern match at Main line 88, column 9 - line 89, column 9: " + [ _45.constructor.name ]);
                          };
                          if (Prelude.otherwise) {
                              return playing(new Data_List.Cons(new Data_List.Cons(_14.value0.paths.value0.value0, new Data_List.Cons(_14.value0.paths.value0.value0, _14.value0.paths.value0.value1)), _14.value0.paths.value1))(inputs_1);
                          };
                      };
                      if (_14 instanceof GameOver) {
                          if (inputs_1.space) {
                              return newGame;
                          };
                          if (!inputs_1.space) {
                              return new GameOver(_14.value0);
                          };
                          throw new Error("Failed pattern match at Main line 88, column 9 - line 89, column 9: " + [ inputs_1.space.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Main line 88, column 9 - line 89, column 9: " + [ inputs_1.constructor.name, _14.constructor.name ]);
                  };
              };
              return Signal.foldp(update)(new GameOver(Data_List.Nil.value))(Signal.sampleOn(_5)(inputs));
          })();
          var background = Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
              Graphics_Canvas.setFillStyle("black")(_7)();
              Graphics_Canvas.fillRect(_7)({
                  x: 0.0, 
                  y: 0.0, 
                  w: 1.0, 
                  h: 1.0
              })();
              Graphics_Canvas.setStrokeStyle("lightblue")(_7)();
              Graphics_Canvas.beginPath(_7)();
              Graphics_Canvas.moveTo(_7)(0.0)(0.1)();
              Graphics_Canvas.lineTo(_7)(1.0)(0.1)();
              Graphics_Canvas.stroke(_7)();
              Graphics_Canvas.beginPath(_7)();
              Graphics_Canvas.moveTo(_7)(0.0)(0.9)();
              Graphics_Canvas.lineTo(_7)(1.0)(0.9)();
              Graphics_Canvas.stroke(_7)();
              Graphics_Canvas.setFillStyle("#222")(_7)();
              Graphics_Canvas.setStrokeStyle("white")(_7)();
              return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(_6)(function (star) {
                  var path = function __do() {
                      Graphics_Canvas.arc(_7)({
                          x: star.x, 
                          y: star.y, 
                          r: 1.5e-2, 
                          start: 0.0, 
                          end: $$Math.pi * 2.0
                      })();
                      return Graphics_Canvas.closePath(_7)();
                  };
                  return function __do() {
                      Graphics_Canvas.fillPath(_7)(path)();
                      return Graphics_Canvas.strokePath(_7)(path)();
                  };
              })();
          });
          var render = function (_13) {
              if (_13 instanceof GameOver) {
                  return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                      background();
                      return renderPaths(_13.value0)();
                  });
              };
              if (_13 instanceof Playing) {
                  return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                      background();
                      return renderPaths(_13.value0.paths)();
                  });
              };
              throw new Error("Failed pattern match at Main line 70, column 1 - line 187, column 30: " + [ _13.constructor.name ]);
          };
          return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render)(state))();
      };
      throw new Error("Failed pattern match at Main line 70, column 1 - line 187, column 30: " + [ _8.constructor.name ]);
  };
  exports["Playing"] = Playing;
  exports["GameOver"] = GameOver;
  exports["Up"] = Up;
  exports["Down"] = Down;
  exports["main"] = main;
  exports["subtract"] = subtract;
  exports["len2"] = len2;
  exports["dist2"] = dist2;
  exports["newGame"] = newGame;
  exports["eqDirection"] = eqDirection;;
 
})(PS["Main"] = PS["Main"] || {});

